{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAiBhD,OACE,sBAAMC,SAXa,SAACC,GAEpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBjB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,QCLdG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,0FAC0EO,UAC7FF,GAFmB,sBAKFG,MAAMR,GALJ,cAKfS,EALe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QAbhB,kBAiBdY,GAjBc,4CAAH,sDCQPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECJb,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GACtBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACb,IAEGc,EDV2BK,CAAanB,GAAjCU,EADyB,EAC/BJ,KAAcO,EADiB,EACjBA,QAQtB,OACE,qCACE,oBAAIjB,UAAU,mCAAd,SAAkDI,IACjDa,GAAW,wCACZ,qBAAKjB,UAAU,YAAf,SACGc,EAAOF,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aElBnB2B,EAAe,WAAM,MAEIzC,mBAAS,CAAC,kBAFd,mBAEzBQ,EAFyB,KAEbT,EAFa,KAQhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGS,EAAWqB,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCdxBqB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.b13b0f10.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChage = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    // Previene el submit al inicio del componente\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      // Inserta la nueva categoria\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChage} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=dEfJk33jZ9IEvZkljyBdOrrZPkoUJ0rh&q=${encodeURI(\n    category\n  )}&limit=10`;\n\n  const resp = await fetch(url);\n\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n// Components\nimport { GifGridItem } from \"./GifGridItem\";\n// Helpers\nimport { getGifs } from \"../helpers/getGifs\";\n// Hooks\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  //   const [images, setImages] = useState([]);\n\n  //   useEffect(() => {\n  //     getGifs(category).then(setImages);\n  //   }, [category]);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__flash\">{category}</h3>\n      {loading && <p>Loading</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\n// Helpers\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state; // { data: [], loading: true }\n};\n","import React, { useState } from \"react\";\n// Components\nimport { AddCategory } from \"./Components/AddCategory\";\nimport { GifGrid } from \"./Components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  // const categories = [\"One Punch Man\", \"Samurai X\", \"Dragon Ball Super\"];\n  const [categories, setCategories] = useState([\"One Punch Man\"]);\n\n  // const handleAdd = () => {\n  //   setCategories((cats) => [...cats, \"Kimetzy no Yaiba\"]);\n  // };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// Components\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}